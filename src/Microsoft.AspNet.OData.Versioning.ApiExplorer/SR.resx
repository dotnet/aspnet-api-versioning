<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionMethodNotFound" xml:space="preserve">
    <value>An action method with the name '{0}' could not be found. The method must be public, non-static, and not have the NonActionAttribute applied.</value>
  </data>
  <data name="AllowedArithmeticOperatorsDesc" xml:space="preserve">
    <value>The allowed arithmetic operators are: {0}.</value>
  </data>
  <data name="AllowedFunctionsDesc" xml:space="preserve">
    <value>The allowed functions are: {0}.</value>
  </data>
  <data name="AllowedLogicalOperatorsDesc" xml:space="preserve">
    <value>The allowed logical operators are: {0}.</value>
  </data>
  <data name="AllowedPropertiesDesc" xml:space="preserve">
    <value>The allowed properties are: {0}.</value>
  </data>
  <data name="AmbiguousActionMethod" xml:space="preserve">
    <value>Multiple action methods with the name '{0}' were found, but could not be resolved using the provided arguments.</value>
  </data>
  <data name="ConventionStyleMismatch" xml:space="preserve">
    <value>OData query option conventions cannot be applied to the controller type {0} using both typed and untyped convention builders.</value>
  </data>
  <data name="CountQueryOptionDesc" xml:space="preserve">
    <value>Indicates whether the total count of items within a collection are returned in the result.</value>
  </data>
  <data name="ExpandQueryOptionDesc" xml:space="preserve">
    <value>Indicates the related entities to be represented inline.</value>
  </data>
  <data name="FilterQueryOptionDesc" xml:space="preserve">
    <value>Restricts the set of items returned.</value>
  </data>
  <data name="InvalidActionMethodExpression" xml:space="preserve">
    <value>The expression '{0}' must refer to a controller action method.</value>
  </data>
  <data name="MaxDepthDesc" xml:space="preserve">
    <value>The maximum depth is {0}.</value>
  </data>
  <data name="MaxExpressionDesc" xml:space="preserve">
    <value>The maximum number of expressions is {0}.</value>
  </data>
  <data name="MaxValueDesc" xml:space="preserve">
    <value>The maximum value is {0}.</value>
  </data>
  <data name="MultipleQueryOptionsNotAllowed" xml:space="preserve">
    <value>Only a single, valid query option may be specified.</value>
  </data>
  <data name="NullContainer" xml:space="preserve">
    <value>The container builder created by the container builder factory must not be null.</value>
  </data>
  <data name="OrderByQueryOptionDesc" xml:space="preserve">
    <value>Specifies the order in which items are returned.</value>
  </data>
  <data name="RequiredInterfaceNotImplemented" xml:space="preserve">
    <value>The type {0} does not implement the {1} interface.</value>
  </data>
  <data name="SelectQueryOptionDesc" xml:space="preserve">
    <value>Limits the properties returned in the result.</value>
  </data>
  <data name="SkipQueryOptionDesc" xml:space="preserve">
    <value>Excludes the specified number of items of the queried collection from the result.</value>
  </data>
  <data name="TopQueryOptionDesc" xml:space="preserve">
    <value>Limits the number of items returned from a collection.</value>
  </data>
  <data name="UnsupportedQueryOption" xml:space="preserve">
    <value>The query option ${0} is not supported.</value>
  </data>
</root>